// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: serverPostFunc.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShortenerClient is the client API for Shortener service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShortenerClient interface {
	// rpc PostURL (PostURLIn) returns (PostURLOut) {} //?? do I even need this if I have API versions?
	PostAPIURL(ctx context.Context, in *PostURLIn, opts ...grpc.CallOption) (*PostURLOut, error)
	// ok I need this next one cuz there is no way
	// to get URL via API apart from GetAllOwned
	GetURL(ctx context.Context, in *GetURLIn, opts ...grpc.CallOption) (*GetURLOut, error)
	DeleteURLs(ctx context.Context, in *DeleteURLIn, opts ...grpc.CallOption) (*Empty, error)
	BatchShorten(ctx context.Context, in *BatchShortenIn, opts ...grpc.CallOption) (*BatchShortenOut, error)
	PingDatabase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	GetAllOwnedURL(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*OwnedURLsOut, error)
	GetStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Stats, error)
}

type shortenerClient struct {
	cc grpc.ClientConnInterface
}

func NewShortenerClient(cc grpc.ClientConnInterface) ShortenerClient {
	return &shortenerClient{cc}
}

func (c *shortenerClient) PostAPIURL(ctx context.Context, in *PostURLIn, opts ...grpc.CallOption) (*PostURLOut, error) {
	out := new(PostURLOut)
	err := c.cc.Invoke(ctx, "/internal.server.pb.Shortener/PostAPIURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) GetURL(ctx context.Context, in *GetURLIn, opts ...grpc.CallOption) (*GetURLOut, error) {
	out := new(GetURLOut)
	err := c.cc.Invoke(ctx, "/internal.server.pb.Shortener/GetURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) DeleteURLs(ctx context.Context, in *DeleteURLIn, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/internal.server.pb.Shortener/DeleteURLs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) BatchShorten(ctx context.Context, in *BatchShortenIn, opts ...grpc.CallOption) (*BatchShortenOut, error) {
	out := new(BatchShortenOut)
	err := c.cc.Invoke(ctx, "/internal.server.pb.Shortener/BatchShorten", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) PingDatabase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/internal.server.pb.Shortener/PingDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) GetAllOwnedURL(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*OwnedURLsOut, error) {
	out := new(OwnedURLsOut)
	err := c.cc.Invoke(ctx, "/internal.server.pb.Shortener/GetAllOwnedURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) GetStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Stats, error) {
	out := new(Stats)
	err := c.cc.Invoke(ctx, "/internal.server.pb.Shortener/GetStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortenerServer is the server API for Shortener service.
// All implementations must embed UnimplementedShortenerServer
// for forward compatibility
type ShortenerServer interface {
	// rpc PostURL (PostURLIn) returns (PostURLOut) {} //?? do I even need this if I have API versions?
	PostAPIURL(context.Context, *PostURLIn) (*PostURLOut, error)
	// ok I need this next one cuz there is no way
	// to get URL via API apart from GetAllOwned
	GetURL(context.Context, *GetURLIn) (*GetURLOut, error)
	DeleteURLs(context.Context, *DeleteURLIn) (*Empty, error)
	BatchShorten(context.Context, *BatchShortenIn) (*BatchShortenOut, error)
	PingDatabase(context.Context, *Empty) (*Empty, error)
	GetAllOwnedURL(context.Context, *Empty) (*OwnedURLsOut, error)
	GetStats(context.Context, *Empty) (*Stats, error)
	mustEmbedUnimplementedShortenerServer()
}

// UnimplementedShortenerServer must be embedded to have forward compatible implementations.
type UnimplementedShortenerServer struct {
}

func (UnimplementedShortenerServer) PostAPIURL(context.Context, *PostURLIn) (*PostURLOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostAPIURL not implemented")
}
func (UnimplementedShortenerServer) GetURL(context.Context, *GetURLIn) (*GetURLOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetURL not implemented")
}
func (UnimplementedShortenerServer) DeleteURLs(context.Context, *DeleteURLIn) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteURLs not implemented")
}
func (UnimplementedShortenerServer) BatchShorten(context.Context, *BatchShortenIn) (*BatchShortenOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchShorten not implemented")
}
func (UnimplementedShortenerServer) PingDatabase(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingDatabase not implemented")
}
func (UnimplementedShortenerServer) GetAllOwnedURL(context.Context, *Empty) (*OwnedURLsOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllOwnedURL not implemented")
}
func (UnimplementedShortenerServer) GetStats(context.Context, *Empty) (*Stats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (UnimplementedShortenerServer) mustEmbedUnimplementedShortenerServer() {}

// UnsafeShortenerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortenerServer will
// result in compilation errors.
type UnsafeShortenerServer interface {
	mustEmbedUnimplementedShortenerServer()
}

func RegisterShortenerServer(s grpc.ServiceRegistrar, srv ShortenerServer) {
	s.RegisterService(&Shortener_ServiceDesc, srv)
}

func _Shortener_PostAPIURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostURLIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).PostAPIURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.server.pb.Shortener/PostAPIURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).PostAPIURL(ctx, req.(*PostURLIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_GetURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetURLIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).GetURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.server.pb.Shortener/GetURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).GetURL(ctx, req.(*GetURLIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_DeleteURLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteURLIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).DeleteURLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.server.pb.Shortener/DeleteURLs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).DeleteURLs(ctx, req.(*DeleteURLIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_BatchShorten_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchShortenIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).BatchShorten(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.server.pb.Shortener/BatchShorten",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).BatchShorten(ctx, req.(*BatchShortenIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_PingDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).PingDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.server.pb.Shortener/PingDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).PingDatabase(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_GetAllOwnedURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).GetAllOwnedURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.server.pb.Shortener/GetAllOwnedURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).GetAllOwnedURL(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.server.pb.Shortener/GetStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).GetStats(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Shortener_ServiceDesc is the grpc.ServiceDesc for Shortener service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Shortener_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "internal.server.pb.Shortener",
	HandlerType: (*ShortenerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostAPIURL",
			Handler:    _Shortener_PostAPIURL_Handler,
		},
		{
			MethodName: "GetURL",
			Handler:    _Shortener_GetURL_Handler,
		},
		{
			MethodName: "DeleteURLs",
			Handler:    _Shortener_DeleteURLs_Handler,
		},
		{
			MethodName: "BatchShorten",
			Handler:    _Shortener_BatchShorten_Handler,
		},
		{
			MethodName: "PingDatabase",
			Handler:    _Shortener_PingDatabase_Handler,
		},
		{
			MethodName: "GetAllOwnedURL",
			Handler:    _Shortener_GetAllOwnedURL_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _Shortener_GetStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "serverPostFunc.proto",
}
