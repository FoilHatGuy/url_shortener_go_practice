// Package auth implements all methods required for creation and verification of secure access to server's contents
package auth

import (
	"crypto/aes"
	"crypto/cipher"
	"crypto/rand"
	"crypto/sha256"
	"encoding/hex"
	"fmt"
	"io"

	"shortener/internal/cfg"
)

// EngineT
// Main operating struct. To initialize call New()
type EngineT struct {
	crypt        cipher.Block
	secret       []byte
	config       *cfg.ConfigT
	randomReader io.Reader
}

// New
// Performs initial setup of main operating variable using configuration from cfg.ConfigT
func New(config *cfg.ConfigT) *EngineT {
	key := sha256.Sum256([]byte(config.Shortener.Secret))
	aesBlock, _ := aes.NewCipher(key[:])

	return &EngineT{
		crypt:        aesBlock,
		secret:       key[:],
		config:       config,
		randomReader: rand.Reader,
	}
}

// SessionValidator
// @Description: Interface for interaction with EngineT
type SessionValidator interface {
	Validate(cookie string) (key string, err error)
	Generate() (cookie string, key string, err error)
	GetCertificate() (stringCertPEM, stringCertKey string, err error)
}

// Validate
// Method used for validation of cookies generated by Generate. Returns deciphered key or error
func (e *EngineT) Validate(cookie string) (key string, err error) {
	src, err := hex.DecodeString(cookie)
	if err != nil {
		return "", fmt.Errorf("string undecodable in auth.Validate %w", err)
	}
	dst := make([]byte, aes.BlockSize)
	e.crypt.Decrypt(dst, src)
	res := hex.EncodeToString(dst)
	return res, nil
}

// Generate
// Method used for generation of key-sid pair. sid can be validated using Validate
func (e *EngineT) Generate() (cookie, key string, err error) {
	b := make([]byte, 16)
	_, err = e.randomReader.Read(b)
	if err != nil {
		return "", "", fmt.Errorf("while reading random bytes: %w", err)
	}
	dst := make([]byte, aes.BlockSize)
	e.crypt.Encrypt(dst, b)

	return hex.EncodeToString(dst), hex.EncodeToString(b), nil
}
